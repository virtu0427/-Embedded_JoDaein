<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>별이 빛나는 밤</title>
  <style>
    body { margin: 0; background: black; overflow: hidden; }
    canvas { display: block; }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const bgImg = new Image();
    bgImg.src = "Background.png";  // 배경 이미지

    const starImgs = [];
    for (let i = 1; i <= 12; i++) {
      const img = new Image();
      img.src = `star${i}.png`;  // 별 이미지들
      starImgs.push(img);
    }

    const starPositions = [
      { x: 200, y: 150 }, { x: 300, y: 100 }, { x: 400, y: 180 },
      { x: 500, y: 120 }, { x: 600, y: 200 }, { x: 700, y: 130 },
      { x: 800, y: 160 }, { x: 900, y: 110 }, { x: 1000, y: 170 },
      { x: 1100, y: 140 }, { x: 1200, y: 190 }, { x: 1300, y: 100 }
    ];

    let light = 600;    // 기본값: 밝을 때
    let distance = 100; // 기본값

    // ⭐ 회전 및 크기 조절 포함한 이미지 그리기 함수
    function drawRotatedImage(img, x, y, angle, scale, alpha = 1.0) {
      const w = img.width * scale;
      const h = img.height * scale;
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(angle);
      ctx.globalAlpha = alpha;
      ctx.drawImage(img, -w / 2, -h / 2, w, h);
      ctx.restore();
    }

    // ✨ 빛나는 효과 (흰색 글로우)
    function drawGlow(x, y, size, intensity) {
      const radius = size * intensity;
      const grd = ctx.createRadialGradient(x, y, 0, x, y, radius);
      grd.addColorStop(0, `rgba(255, 255, 255, ${0.5 * intensity})`);
      grd.addColorStop(1, "rgba(255, 255, 255, 0)");
      ctx.beginPath();
      ctx.fillStyle = grd;
      ctx.arc(x, y, radius, 0, 2 * Math.PI);
      ctx.fill();
    }

    // 🎨 전체 그림 그리기 루프
    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(bgImg, 0, 0, canvas.width, canvas.height);

      const time = Date.now();
      const glowIntensity = Math.min(1, Math.max(0, (600 - light) / 510));
      const scale = Math.max(0.5, 1.5 - distance / 100);

      for (let i = 0; i < 12; i++) {
        const angle = time / 1000 + i * 0.2;

        drawRotatedImage(starImgs[i], starPositions[i].x, starPositions[i].y, angle, scale, 1.0);
        drawGlow(starPositions[i].x, starPositions[i].y, 30, glowIntensity);
      }

      requestAnimationFrame(draw);
    }

    draw();

    // 🔌 WebSocket 연결
    const socket = new WebSocket("ws://localhost:8080");

    socket.onmessage = function (event) {
      try {
        const data = JSON.parse(event.data);
        if (data.light !== undefined) light = data.light;
        if (data.distance !== undefined) distance = data.distance;
        // console.log("📡 센서 수신:", data);
      } catch (e) {
        console.error("⚠️ JSON 파싱 실패:", e);
      }
    };
  </script>
</body>
</html>
